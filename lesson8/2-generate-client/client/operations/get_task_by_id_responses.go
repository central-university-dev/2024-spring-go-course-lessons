// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"generate-client/models"
)

// GetTaskByIDReader is a Reader for the GetTaskByID structure.
type GetTaskByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTaskByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTaskByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTaskByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTaskByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /task/{taskId}] getTaskById", response, response.Code())
	}
}

// NewGetTaskByIDOK creates a GetTaskByIDOK with default headers values
func NewGetTaskByIDOK() *GetTaskByIDOK {
	return &GetTaskByIDOK{}
}

/*
GetTaskByIDOK describes a response with status code 200, with default header values.

Успех
*/
type GetTaskByIDOK struct {
	Payload *models.Task
}

// IsSuccess returns true when this get task by Id o k response has a 2xx status code
func (o *GetTaskByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get task by Id o k response has a 3xx status code
func (o *GetTaskByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task by Id o k response has a 4xx status code
func (o *GetTaskByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get task by Id o k response has a 5xx status code
func (o *GetTaskByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get task by Id o k response a status code equal to that given
func (o *GetTaskByIDOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get task by Id o k response
func (o *GetTaskByIDOK) Code() int {
	return 200
}

func (o *GetTaskByIDOK) Error() string {
	return fmt.Sprintf("[GET /task/{taskId}][%d] getTaskByIdOK  %+v", 200, o.Payload)
}

func (o *GetTaskByIDOK) String() string {
	return fmt.Sprintf("[GET /task/{taskId}][%d] getTaskByIdOK  %+v", 200, o.Payload)
}

func (o *GetTaskByIDOK) GetPayload() *models.Task {
	return o.Payload
}

func (o *GetTaskByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Task)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTaskByIDBadRequest creates a GetTaskByIDBadRequest with default headers values
func NewGetTaskByIDBadRequest() *GetTaskByIDBadRequest {
	return &GetTaskByIDBadRequest{}
}

/*
GetTaskByIDBadRequest describes a response with status code 400, with default header values.

Некорректный ввод
*/
type GetTaskByIDBadRequest struct {
}

// IsSuccess returns true when this get task by Id bad request response has a 2xx status code
func (o *GetTaskByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task by Id bad request response has a 3xx status code
func (o *GetTaskByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task by Id bad request response has a 4xx status code
func (o *GetTaskByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get task by Id bad request response has a 5xx status code
func (o *GetTaskByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get task by Id bad request response a status code equal to that given
func (o *GetTaskByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get task by Id bad request response
func (o *GetTaskByIDBadRequest) Code() int {
	return 400
}

func (o *GetTaskByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /task/{taskId}][%d] getTaskByIdBadRequest ", 400)
}

func (o *GetTaskByIDBadRequest) String() string {
	return fmt.Sprintf("[GET /task/{taskId}][%d] getTaskByIdBadRequest ", 400)
}

func (o *GetTaskByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTaskByIDNotFound creates a GetTaskByIDNotFound with default headers values
func NewGetTaskByIDNotFound() *GetTaskByIDNotFound {
	return &GetTaskByIDNotFound{}
}

/*
GetTaskByIDNotFound describes a response with status code 404, with default header values.

Такой задачи нет
*/
type GetTaskByIDNotFound struct {
}

// IsSuccess returns true when this get task by Id not found response has a 2xx status code
func (o *GetTaskByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get task by Id not found response has a 3xx status code
func (o *GetTaskByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get task by Id not found response has a 4xx status code
func (o *GetTaskByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get task by Id not found response has a 5xx status code
func (o *GetTaskByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get task by Id not found response a status code equal to that given
func (o *GetTaskByIDNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get task by Id not found response
func (o *GetTaskByIDNotFound) Code() int {
	return 404
}

func (o *GetTaskByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /task/{taskId}][%d] getTaskByIdNotFound ", 404)
}

func (o *GetTaskByIDNotFound) String() string {
	return fmt.Sprintf("[GET /task/{taskId}][%d] getTaskByIdNotFound ", 404)
}

func (o *GetTaskByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
