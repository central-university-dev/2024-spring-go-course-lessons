// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DeletePetReader is a Reader for the DeletePet structure.
type DeletePetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewDeletePetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeletePetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /task/{taskId}] deletePet", response, response.Code())
	}
}

// NewDeletePetBadRequest creates a DeletePetBadRequest with default headers values
func NewDeletePetBadRequest() *DeletePetBadRequest {
	return &DeletePetBadRequest{}
}

/*
DeletePetBadRequest describes a response with status code 400, with default header values.

Некорректный ввод
*/
type DeletePetBadRequest struct {
}

// IsSuccess returns true when this delete pet bad request response has a 2xx status code
func (o *DeletePetBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete pet bad request response has a 3xx status code
func (o *DeletePetBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pet bad request response has a 4xx status code
func (o *DeletePetBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete pet bad request response has a 5xx status code
func (o *DeletePetBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete pet bad request response a status code equal to that given
func (o *DeletePetBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the delete pet bad request response
func (o *DeletePetBadRequest) Code() int {
	return 400
}

func (o *DeletePetBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /task/{taskId}][%d] deletePetBadRequest ", 400)
}

func (o *DeletePetBadRequest) String() string {
	return fmt.Sprintf("[DELETE /task/{taskId}][%d] deletePetBadRequest ", 400)
}

func (o *DeletePetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeletePetNotFound creates a DeletePetNotFound with default headers values
func NewDeletePetNotFound() *DeletePetNotFound {
	return &DeletePetNotFound{}
}

/*
DeletePetNotFound describes a response with status code 404, with default header values.

Такой задачи нет
*/
type DeletePetNotFound struct {
}

// IsSuccess returns true when this delete pet not found response has a 2xx status code
func (o *DeletePetNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete pet not found response has a 3xx status code
func (o *DeletePetNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete pet not found response has a 4xx status code
func (o *DeletePetNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete pet not found response has a 5xx status code
func (o *DeletePetNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete pet not found response a status code equal to that given
func (o *DeletePetNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the delete pet not found response
func (o *DeletePetNotFound) Code() int {
	return 404
}

func (o *DeletePetNotFound) Error() string {
	return fmt.Sprintf("[DELETE /task/{taskId}][%d] deletePetNotFound ", 404)
}

func (o *DeletePetNotFound) String() string {
	return fmt.Sprintf("[DELETE /task/{taskId}][%d] deletePetNotFound ", 404)
}

func (o *DeletePetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
