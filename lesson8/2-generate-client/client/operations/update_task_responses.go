// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// UpdateTaskReader is a Reader for the UpdateTask structure.
type UpdateTaskReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTaskReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 400:
		result := NewUpdateTaskBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateTaskNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateTaskUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /task/{taskId}] updateTask", response, response.Code())
	}
}

// NewUpdateTaskBadRequest creates a UpdateTaskBadRequest with default headers values
func NewUpdateTaskBadRequest() *UpdateTaskBadRequest {
	return &UpdateTaskBadRequest{}
}

/*
UpdateTaskBadRequest describes a response with status code 400, with default header values.

Некорректный ввод
*/
type UpdateTaskBadRequest struct {
}

// IsSuccess returns true when this update task bad request response has a 2xx status code
func (o *UpdateTaskBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update task bad request response has a 3xx status code
func (o *UpdateTaskBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update task bad request response has a 4xx status code
func (o *UpdateTaskBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update task bad request response has a 5xx status code
func (o *UpdateTaskBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update task bad request response a status code equal to that given
func (o *UpdateTaskBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update task bad request response
func (o *UpdateTaskBadRequest) Code() int {
	return 400
}

func (o *UpdateTaskBadRequest) Error() string {
	return fmt.Sprintf("[PUT /task/{taskId}][%d] updateTaskBadRequest ", 400)
}

func (o *UpdateTaskBadRequest) String() string {
	return fmt.Sprintf("[PUT /task/{taskId}][%d] updateTaskBadRequest ", 400)
}

func (o *UpdateTaskBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTaskNotFound creates a UpdateTaskNotFound with default headers values
func NewUpdateTaskNotFound() *UpdateTaskNotFound {
	return &UpdateTaskNotFound{}
}

/*
UpdateTaskNotFound describes a response with status code 404, with default header values.

Такой задачи нет
*/
type UpdateTaskNotFound struct {
}

// IsSuccess returns true when this update task not found response has a 2xx status code
func (o *UpdateTaskNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update task not found response has a 3xx status code
func (o *UpdateTaskNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update task not found response has a 4xx status code
func (o *UpdateTaskNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update task not found response has a 5xx status code
func (o *UpdateTaskNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update task not found response a status code equal to that given
func (o *UpdateTaskNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update task not found response
func (o *UpdateTaskNotFound) Code() int {
	return 404
}

func (o *UpdateTaskNotFound) Error() string {
	return fmt.Sprintf("[PUT /task/{taskId}][%d] updateTaskNotFound ", 404)
}

func (o *UpdateTaskNotFound) String() string {
	return fmt.Sprintf("[PUT /task/{taskId}][%d] updateTaskNotFound ", 404)
}

func (o *UpdateTaskNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTaskUnprocessableEntity creates a UpdateTaskUnprocessableEntity with default headers values
func NewUpdateTaskUnprocessableEntity() *UpdateTaskUnprocessableEntity {
	return &UpdateTaskUnprocessableEntity{}
}

/*
UpdateTaskUnprocessableEntity describes a response with status code 422, with default header values.

Недопустимые значения
*/
type UpdateTaskUnprocessableEntity struct {
}

// IsSuccess returns true when this update task unprocessable entity response has a 2xx status code
func (o *UpdateTaskUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update task unprocessable entity response has a 3xx status code
func (o *UpdateTaskUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update task unprocessable entity response has a 4xx status code
func (o *UpdateTaskUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update task unprocessable entity response has a 5xx status code
func (o *UpdateTaskUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update task unprocessable entity response a status code equal to that given
func (o *UpdateTaskUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update task unprocessable entity response
func (o *UpdateTaskUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateTaskUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /task/{taskId}][%d] updateTaskUnprocessableEntity ", 422)
}

func (o *UpdateTaskUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /task/{taskId}][%d] updateTaskUnprocessableEntity ", 422)
}

func (o *UpdateTaskUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
